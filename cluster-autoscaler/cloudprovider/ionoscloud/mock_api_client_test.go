// Code generated by mockery v2.10.0. DO NOT EDIT.

package ionoscloud

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ionoscloud "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/ionoscloud/ionos-cloud-sdk-go"
)

// MockAPIClient is an autogenerated mock type for the APIClient type
type MockAPIClient struct {
	mock.Mock
}

// K8sNodepoolsFindById provides a mock function with given fields: ctx, k8sClusterId, nodepoolId
func (_m *MockAPIClient) K8sNodepoolsFindById(ctx context.Context, k8sClusterId string, nodepoolId string) ionoscloud.ApiK8sNodepoolsFindByIdRequest {
	ret := _m.Called(ctx, k8sClusterId, nodepoolId)

	var r0 ionoscloud.ApiK8sNodepoolsFindByIdRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ionoscloud.ApiK8sNodepoolsFindByIdRequest); ok {
		r0 = rf(ctx, k8sClusterId, nodepoolId)
	} else {
		r0 = ret.Get(0).(ionoscloud.ApiK8sNodepoolsFindByIdRequest)
	}

	return r0
}

// K8sNodepoolsFindByIdExecute provides a mock function with given fields: r
func (_m *MockAPIClient) K8sNodepoolsFindByIdExecute(r ionoscloud.ApiK8sNodepoolsFindByIdRequest) (ionoscloud.KubernetesNodePool, *ionoscloud.APIResponse, error) {
	ret := _m.Called(r)

	var r0 ionoscloud.KubernetesNodePool
	if rf, ok := ret.Get(0).(func(ionoscloud.ApiK8sNodepoolsFindByIdRequest) ionoscloud.KubernetesNodePool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(ionoscloud.KubernetesNodePool)
	}

	var r1 *ionoscloud.APIResponse
	if rf, ok := ret.Get(1).(func(ionoscloud.ApiK8sNodepoolsFindByIdRequest) *ionoscloud.APIResponse); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ionoscloud.APIResponse)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(ionoscloud.ApiK8sNodepoolsFindByIdRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// K8sNodepoolsNodesDelete provides a mock function with given fields: ctx, k8sClusterId, nodepoolId, nodeId
func (_m *MockAPIClient) K8sNodepoolsNodesDelete(ctx context.Context, k8sClusterId string, nodepoolId string, nodeId string) ionoscloud.ApiK8sNodepoolsNodesDeleteRequest {
	ret := _m.Called(ctx, k8sClusterId, nodepoolId, nodeId)

	var r0 ionoscloud.ApiK8sNodepoolsNodesDeleteRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ionoscloud.ApiK8sNodepoolsNodesDeleteRequest); ok {
		r0 = rf(ctx, k8sClusterId, nodepoolId, nodeId)
	} else {
		r0 = ret.Get(0).(ionoscloud.ApiK8sNodepoolsNodesDeleteRequest)
	}

	return r0
}

// K8sNodepoolsNodesDeleteExecute provides a mock function with given fields: r
func (_m *MockAPIClient) K8sNodepoolsNodesDeleteExecute(r ionoscloud.ApiK8sNodepoolsNodesDeleteRequest) (*ionoscloud.APIResponse, error) {
	ret := _m.Called(r)

	var r0 *ionoscloud.APIResponse
	if rf, ok := ret.Get(0).(func(ionoscloud.ApiK8sNodepoolsNodesDeleteRequest) *ionoscloud.APIResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ionoscloud.APIResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ionoscloud.ApiK8sNodepoolsNodesDeleteRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// K8sNodepoolsNodesGet provides a mock function with given fields: ctx, k8sClusterId, nodepoolId
func (_m *MockAPIClient) K8sNodepoolsNodesGet(ctx context.Context, k8sClusterId string, nodepoolId string) ionoscloud.ApiK8sNodepoolsNodesGetRequest {
	ret := _m.Called(ctx, k8sClusterId, nodepoolId)

	var r0 ionoscloud.ApiK8sNodepoolsNodesGetRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ionoscloud.ApiK8sNodepoolsNodesGetRequest); ok {
		r0 = rf(ctx, k8sClusterId, nodepoolId)
	} else {
		r0 = ret.Get(0).(ionoscloud.ApiK8sNodepoolsNodesGetRequest)
	}

	return r0
}

// K8sNodepoolsNodesGetExecute provides a mock function with given fields: r
func (_m *MockAPIClient) K8sNodepoolsNodesGetExecute(r ionoscloud.ApiK8sNodepoolsNodesGetRequest) (ionoscloud.KubernetesNodes, *ionoscloud.APIResponse, error) {
	ret := _m.Called(r)

	var r0 ionoscloud.KubernetesNodes
	if rf, ok := ret.Get(0).(func(ionoscloud.ApiK8sNodepoolsNodesGetRequest) ionoscloud.KubernetesNodes); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(ionoscloud.KubernetesNodes)
	}

	var r1 *ionoscloud.APIResponse
	if rf, ok := ret.Get(1).(func(ionoscloud.ApiK8sNodepoolsNodesGetRequest) *ionoscloud.APIResponse); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ionoscloud.APIResponse)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(ionoscloud.ApiK8sNodepoolsNodesGetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// K8sNodepoolsPut provides a mock function with given fields: ctx, k8sClusterId, nodepoolId
func (_m *MockAPIClient) K8sNodepoolsPut(ctx context.Context, k8sClusterId string, nodepoolId string) ionoscloud.ApiK8sNodepoolsPutRequest {
	ret := _m.Called(ctx, k8sClusterId, nodepoolId)

	var r0 ionoscloud.ApiK8sNodepoolsPutRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ionoscloud.ApiK8sNodepoolsPutRequest); ok {
		r0 = rf(ctx, k8sClusterId, nodepoolId)
	} else {
		r0 = ret.Get(0).(ionoscloud.ApiK8sNodepoolsPutRequest)
	}

	return r0
}

// K8sNodepoolsPutExecute provides a mock function with given fields: r
func (_m *MockAPIClient) K8sNodepoolsPutExecute(r ionoscloud.ApiK8sNodepoolsPutRequest) (ionoscloud.KubernetesNodePool, *ionoscloud.APIResponse, error) {
	ret := _m.Called(r)

	var r0 ionoscloud.KubernetesNodePool
	if rf, ok := ret.Get(0).(func(ionoscloud.ApiK8sNodepoolsPutRequest) ionoscloud.KubernetesNodePool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(ionoscloud.KubernetesNodePool)
	}

	var r1 *ionoscloud.APIResponse
	if rf, ok := ret.Get(1).(func(ionoscloud.ApiK8sNodepoolsPutRequest) *ionoscloud.APIResponse); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ionoscloud.APIResponse)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(ionoscloud.ApiK8sNodepoolsPutRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
